---
layout: post
status: publish
published: true
title: PHPメンタリングとソフトウェア アプレンティスシップ(徒弟制度)の重要性 (翻訳版)
author: Elizabeth Smith
author_login: elizabethsmith
author_email: elizabethsmith@engineyard.com
wordpress_id: 844
wordpress_url: http://www.engineyard.co.jp/blog/?p=844
date: 2013-07-26 09:00:30.000000000 +09:00
categories:
- Uncategorized
tags: []
comments: []
---
<div class="note">本記事は英語版ブログで<a href="https://blog.engineyard.com/2013/php-mentoring-software-apprenticeship" target="_blank">2013年1月15日に公開された記事</a>の翻訳版です。</div>

優秀なプログラマーになるにはどうしたらよいでしょうか？　学校へ行ったり、COBOLに関するレクチャーを聴くのがよいでしょうか？　特定のテーマに関する専門家の本を読んだり、マーティン・フォウラーの設計パターン小説を丸ごと暗記して、技術を向上させる人もいるかもしれません。あるいは、ひたすらコーディングして、失敗から学ぶ、という言葉を実践している人も。優秀なプログラマーになるための学習を考えるには、まずプログラミングとは何かを知らなければなりません。

プログラミングを科学だと考える人もいます。明確なルールがあって、それにきちんと従えば常に同じ結果が得られる科学だと。一方で、プログラミングはエンジニアリングで、数学のようなある種の純粋科学の実用化だと考える人もいます。私自身は、プログラミングは工芸だと考えています。この言葉を聞くと、理論的な人は特に、眼をぱちくりさせることが往々にしてあります。技能とは、実践的な方法でスキルと専門知識を適用することです。

私がプログラミングを工芸として指導し始めると、たいていの場合、みな憤慨して「工芸には本来備わっている価値があるべきだ」と叫びます。「いいえ、あなたたちは芸術のことを言っているんです。いくつかの特定のプログラムは芸術だと言えますが、たいていの場合はちがいます。職人は、確かに芸術家のように自分の職に惚れ込んでいますが、もたらされる価値の利益と実用性を最大限に引き出すには、形状と機能のバランスがとれていなくてはなりません」

一般に、その職における真の腕前、真のスキルは、熟練の職人が絶対確実なやり方で弟子に知識を伝えることによって学ばれます。私の考えでは、偉大なプログラマーになる唯一最良の方法はメンタリングです。メンタリングとは、未加工の潜在能力を持つ人を、その人を訓練できる他の人たちと組ませて、その潜在能力を有用で素晴らしいものに仕立て上げるプロセスです。

私がプログラマーになれたのは、たくさんの人たちが時間とエネルギーを注いでメンタリングしてくれたおかげです。最初に私をプログラミングの世界へと導いてくれたのは父と兄でした。二人とも、私をサポートしつつ、「自分でやりなさい」とお尻を蹴飛ばしてもくれました。ほかにも、別のプログラミング言語で自分を試すよう背中を押してくれたり、話たり書いたりしてみるように勇気づけてくれた人たちがいました。その過程で、私はもう一つの真実を学んだのです。

メンタリングとは、弟子だけでなく、指導者のためにもなるのです。スキルを他人に伝えることは、想像以上に自分の役にも立つのです。互いに提携することによって、指導者も弟子も人のネットワークを広げることができます。自分が誰かを助けている、という意識から本来備わっているよい感情が生まれます。そして、何よりも、あなたがやってきたことに対して弟子が新たな視点を提供してくれます。

しかし、新しい人たちと出会うのは簡単ではありません。だからこそ、人を結びつけることだけを目的とした出会い系サイトやソーシャル ネットワークをはじめとするウェブサイトがごまんとあるのです。自分を指導してくれる人を見つけるのは、結婚相手を見つけるのと同じくらい難しいかもしれません。結局のところ、メンター制度とは人間関係なのですから。

このようなニーズから、<a href="http://phpmentoring.org/" target="_blank">phpmentoring</a>が生まれました。私はまず、いくつかの会議でメンタリング全般について、メンタリングが自分にどう役立ったか、オープンソースでのメンタリングへの対処の仕方、ビジネスや組織でのメンタリングの方法について話すことから始めました。話した後、多くの質問が寄せられましたが、その中で一番多かったのが「どうやってメンターを見つけたらよいか」というものでした。新しい人たちと出会うだけでも難しいのですから、自分が習いたい特定のスキルを持ち、かつそれを喜んで教えてくれる人たちと出会うことは想像に難くありません。

私は、フリーノードにircチャンネルを作り、phpmentoringと名付けました。これは、私が話をした会議の大半がPHPを中心とするものだったからです。ツイッターで呼びかけたところ、このチャンネルに30人が集まりました。紛れもなく、人々が会う場所が必要とされていたのです。wikiとサイト ホスティングにgithubのリソースを利用し、全般的な議論の場にircを使って、phpmentoringの考えは、友人たちのツイッターからアクティブなウェブサイト、wiki、情報リソースを持つレポジトリへと急成長し、メンタリングをしたい人たちとされたい人たちをマッチングさせる”PHP dating service”に発展しました。

私は今もメンタリングを広め続けています——会議でメンタリングの重要性について話し、phpmentoring（そしてメンタリング全般について）のことを伝え、私自身もメンターとしての役割を果たしています。その一方で、php-gtk、winapi for phpなどの他のオープンソースのプロジェクトにも関わっています。「本業」では、内部の製造ツールからクライアントのパフォーマンスの監視、Wikipediaに至るまで、非常に広範なプロジェクトに取り組む特権を享受しています。

結局のところ、私は働かなければならないから働いているのではなく、働きたいから働いているのです。なぜなら、みなさんが毎日使う技術は、向上させる必要があるからです。今日使われているツールと技術は、20年後にはもう使われていないでしょう。ですから、言語、オペレーティング システム、またはコーディング標準をめぐる聖戦など信じていません。

コードにおける実用主義と理想主義のバランスを保つこと——それが私が日々実践していることであり、もっと多くの人たちがそのバランスを見つけることを学んでほしい、または、せめてそのバランスを見つける努力をしてほしい、と思っています。

私は、自分がオープンソース コミュニティに貢献することで得たことはすべて還元し、学んだことは伝える必要があると考えています。それはこの先一生かかることでしょう。
