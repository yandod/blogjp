---
layout: post
status: publish
published: true
title: MySQL をキューに使用する 5 つの微妙な方法とその落とし穴 (翻訳版)
author: Baron Schwartz
author_login: baronschwartz
author_email: baronschwartz@engineyard.com
excerpt: "<div class=\"note\">\r\n本記事は<a href=\"http://www.engineyard.com/blog/2011/5-subtle-ways-youre-using-mysql-as-a-queue-and-why-itll-bite-you/\"
  target=\"_blank\">英語版のブログに2011年9月15日</a>に投稿された記事の翻訳版です。今回のゲスト投稿は <a href=\"http://www.percona.com/\">Percona</a>
  の皆さんによる記事です。同社では 2011 年 10 月 24 日と 25 日に <a href=\"http://www.percona.com/live/london-2011/\">Percona
  Live London</a> というイベントを開催します。この 2 日間にわたるイベントでは、MySQL の分野における経験豊かなスピーカーにより、純粋に技術関係のセッションが行われます。\r\n\r\nロンドン周辺からの参加をご希望の方は、今週が無料パスを手に入れるチャンスです。応募方法は
  <a href=\"http://twitter.com/#!/engineyard\">@engineyard</a> のツイッター フィードをチェックしてください。\r\n\r\n</div>\r\n私は
  MySQL のコンサルタント会社 Percona に勤務しています。記憶の補助として、お客様から解決を依頼された興味深い問題についてメモしたテキスト ファイルを作成し、すぐに参照できるようにしています。その中で頻度の高い問題のカテゴリとして、MySQL
  でのジョブ キュー構築の試みが挙げられます。この項目の URL はあまりに多すぎて、今ではその管理を止めてしまったほどです。お客様からはデータベースのジョブ キューの問題についての問い合わせが絶え間なく寄せられます。ここで言う
  \"ジョブ キュー\" とは、一般に、処理した後で \"完了\" とマークする必要のある、お客様が挿入したもののリストを指しています。こうしたケースは何十回、何百回と目撃してきました。\r\n\r\nお客様の多くは適切なジョブ
  キューやバッチ処理システムを構築することの難しさを十分理解しており、MySQL 内にこれを作成しようとはしません。開発者から見るとジョブ キューは優れた設計パターンのようであっても、これをリレーショナル
  データベースにうまく実装するのは難しいことを、彼らは理解しています。しかし、私の経験では、いかに経験を積んだ開発者であっても意外な方法でジョブ キューを使ってしまうことがあるのです。\r\n\r\nジョブ
  キューの設計パターンがアプリケーションのデータベースに知らぬ間に侵入してくる一般的なケースを、私の経験を基に次にいくつか挙げます。以下のような方法で現在 MySQL
  を使っているという心当たりはありませんか?\r\n<ol>\r\n\t<li><strong>送信するメッセージのリストの格納</strong>: E メール、SMS
  メッセージ、または友達リクエストなど、テーブルにメッセージのリストを格納した後、そのリストに目を通して送信の必要があるメッセージを探す場合、これはジョブ キューを作成したことになります。</li>\r\n\t<li><strong>モデレート、トークン要求、または承認</strong>:
  保留中の記事、コメント、投稿、E メール検証、またはユーザーのリストを保管していませんか?その場合はジョブ キューがあることになります。</li>\r\n\t<li><strong>注文処理</strong>:注文処理システムで新たに送信された注文を検索し、それを処理してステータスを更新する場合、これはジョブ
  キーになります。</li>\r\n\t<li><strong>リモート サービスの更新</strong>: 広告管理ソフトウェアで広告の入札変更を計算してから、それを広告サービスと連絡する他の処理用に格納していませんか?これはジョブ
  キューに当たります。</li>\r\n\t<li><strong>増分リフレッシュまたは同期</strong>: アイテムのリストを格納していて、そのリストが変更されたり何らかのバックグラウンド処理を必要とする場合
  (たとえば、新しいファイル共有サービスのために同期するファイルなど)、これももちろん、ジョブ キューですね。</li>\r\n</ol>\r\n以上でおわかりのように、キューは狡猾で、あなたが気付かないうちに音もなく忍び込んでくるのです。実際にはこうしたキューの多くは特に問題ではありません。しかし、リスクは常に潜在しており、どれが問題につながるかを予測するのは困難だというのが私の経験です。これはたとえば、アプリケーションのどの部分に一番負荷がかかるか、またはユーザーが自分の知り合いに何を勧めるかなど、前もって予測できない動作に左右されるためです。\r\n\r\nでは次に、ジョブ
  キューによって問題が発生する理由について少し説明した後、問題発生の可能性を減らす方法をいくつか示したいと思います。"
wordpress_id: 635
wordpress_url: http://www.engineyard.co.jp/blog/?p=635
date: 2013-03-11 13:00:36.000000000 +09:00
categories:
- Uncategorized
tags: []
comments: []
---
<div class="note">
本記事は<a href="http://www.engineyard.com/blog/2011/5-subtle-ways-youre-using-mysql-as-a-queue-and-why-itll-bite-you/" target="_blank">英語版のブログに2011年9月15日</a>に投稿された記事の翻訳版です。今回のゲスト投稿は <a href="http://www.percona.com/">Percona</a> の皆さんによる記事です。同社では 2011 年 10 月 24 日と 25 日に <a href="http://www.percona.com/live/london-2011/">Percona Live London</a> というイベントを開催します。この 2 日間にわたるイベントでは、MySQL の分野における経験豊かなスピーカーにより、純粋に技術関係のセッションが行われます。

ロンドン周辺からの参加をご希望の方は、今週が無料パスを手に入れるチャンスです。応募方法は <a href="http://twitter.com/#!/engineyard">@engineyard</a> のツイッター フィードをチェックしてください。

</div>
私は MySQL のコンサルタント会社 Percona に勤務しています。記憶の補助として、お客様から解決を依頼された興味深い問題についてメモしたテキスト ファイルを作成し、すぐに参照できるようにしています。その中で頻度の高い問題のカテゴリとして、MySQL でのジョブ キュー構築の試みが挙げられます。この項目の URL はあまりに多すぎて、今ではその管理を止めてしまったほどです。お客様からはデータベースのジョブ キューの問題についての問い合わせが絶え間なく寄せられます。ここで言う "ジョブ キュー" とは、一般に、処理した後で "完了" とマークする必要のある、お客様が挿入したもののリストを指しています。こうしたケースは何十回、何百回と目撃してきました。

お客様の多くは適切なジョブ キューやバッチ処理システムを構築することの難しさを十分理解しており、MySQL 内にこれを作成しようとはしません。開発者から見るとジョブ キューは優れた設計パターンのようであっても、これをリレーショナル データベースにうまく実装するのは難しいことを、彼らは理解しています。しかし、私の経験では、いかに経験を積んだ開発者であっても意外な方法でジョブ キューを使ってしまうことがあるのです。

ジョブ キューの設計パターンがアプリケーションのデータベースに知らぬ間に侵入してくる一般的なケースを、私の経験を基に次にいくつか挙げます。以下のような方法で現在 MySQL を使っているという心当たりはありませんか?
<ol>
	<li><strong>送信するメッセージのリストの格納</strong>: E メール、SMS メッセージ、または友達リクエストなど、テーブルにメッセージのリストを格納した後、そのリストに目を通して送信の必要があるメッセージを探す場合、これはジョブ キューを作成したことになります。</li>
	<li><strong>モデレート、トークン要求、または承認</strong>: 保留中の記事、コメント、投稿、E メール検証、またはユーザーのリストを保管していませんか?その場合はジョブ キューがあることになります。</li>
	<li><strong>注文処理</strong>:注文処理システムで新たに送信された注文を検索し、それを処理してステータスを更新する場合、これはジョブ キーになります。</li>
	<li><strong>リモート サービスの更新</strong>: 広告管理ソフトウェアで広告の入札変更を計算してから、それを広告サービスと連絡する他の処理用に格納していませんか?これはジョブ キューに当たります。</li>
	<li><strong>増分リフレッシュまたは同期</strong>: アイテムのリストを格納していて、そのリストが変更されたり何らかのバックグラウンド処理を必要とする場合 (たとえば、新しいファイル共有サービスのために同期するファイルなど)、これももちろん、ジョブ キューですね。</li>
</ol>
以上でおわかりのように、キューは狡猾で、あなたが気付かないうちに音もなく忍び込んでくるのです。実際にはこうしたキューの多くは特に問題ではありません。しかし、リスクは常に潜在しており、どれが問題につながるかを予測するのは困難だというのが私の経験です。これはたとえば、アプリケーションのどの部分に一番負荷がかかるか、またはユーザーが自分の知り合いに何を勧めるかなど、前もって予測できない動作に左右されるためです。

では次に、ジョブ キューによって問題が発生する理由について少し説明した後、問題発生の可能性を減らす方法をいくつか示したいと思います。<a id="more"></a><a id="more-635"></a>通常、問題はいたってシンプルで、要は "パフォーマンス" のひと言に尽きます。時間が経過するにつれ、ジョブ キュー テーブルのパフォーマンスが低下するか、またはその巻き添えとなった他の要素のパフォーマンスが低下します。これには主に 3 つの理由があります。
<ol>
	<li><strong>ポーリング</strong>。私が目にするジョブ キュー システムの多くは、1 つまたは複数のワーカー プロセスを使ってタスクを確認しています。これは、負荷の高いアプリケーションではすぐに問題につながります。この理由については後述します。</li>
	<li><strong>ロック</strong>。ポーリングの実装の 1 つであるロックは通常、SELECT FOR UPDATE を実行して処理するアイテムがあるかどうか確認し、ある場合には何らかの UPDATE を実行してこれを処理中としてマークし、処理を実行してから完了としてマークするという形で機能します。バリエーションがあり、必ずしも SELECT FOR UPDATE が関わるわけではありませんが、多くの場合同じような効果を生みます。SELECT FOR UPDATE に伴う問題は、通常これがすべてのワーカー プロセスに対して単一の同期ポイントを作成し、COMMIT でロックが解放されるのを待機するプロセスの数が多くなるという点です。これはうまく実装されていないと (たとえば、ワーカーがアイテムを処理し終わるまでコミットしないなど) 非常にまずい状況を招きますが、優れた実装であっても深刻なパイルアップが発生することがあります。</li>
	<li><strong>データの増大</strong>。E メール リストの管理アプリケーションで 1 つの巨大な E メール テーブルを使用している例はこれまで無数に見てきました。新しい E メールが "new" ステータスでテーブルに追加され、その後更新されて "sent" としてマークされます。このような E メール テーブルは、時間の経過とともに何百万行、何十億行に膨れ上がります。送信する新規メッセージの数は数百から数千であっても、この膨大なサイズのテーブルのクエリはひどくゆっくりしたものとなります。これにポーリングやロック、そしてサーバーにかかる大きな負荷が加われば、大惨事が起きるのは時間の問題です。</li>
</ol>
これらの問題の解決方法は意外に単純で、1) ポーリングを避ける、2) ロックを避ける、そして 3) 他のデータと同じテーブルにキューを格納するのを避ける、ということになります。ただし、こうした解決策を実装するには多少の工夫が必要です。

まず、ポーリングを避ける方法について見てみましょう。PostgreSQL や Microsoft SQL Server などのように、MySQL にも listen/notify 機能があったらと思います。残念ながら MySQL にこの機能はありませんが、それをシミュレートすることは可能です。これには、GET_LOCK() と RELEASE_LOCK() を使用する、Spread 経由で通信するプラグインを作成する、またはコンシューマーに SLEEP(100000) クエリを実行させ、これらのクエリを強制終了してワーカーにタスクがあることを知らせる、という3 つの方法が考えられます。もっと直接的な解決策があるといいのですが、とりあえずはこれらの方法でうまく対処できます。

ロックを避けるのは、実はいたって簡単です。SELECT FOR UPDATE の後に UPDATE を実行する代わりに、LIMIT を使って UPDATE を実行し、影響を受ける行があるか確認します。クライアント プロトコルによってそれが確認されるので、データベースに別のクエリを送って確認する必要はありません。この UPDATE では必ず autocommit を有効にして、結果のロックがステートメントの期間より長く開いたままにならないようする必要があります。autocommit が有効でない場合、アプリケーションは COMMIT を実行してロックをすべて解放しなければならず、これでは SELECT FOR UPDATE を使用するのと変わりがありません。(他の操作は autocommit を無効にして実行できます。有効化はこのステートメントだけに必要です。)私はこの SELECT FOR UPDATE が発明されなかったならどんなに良かったかと思います。このステートメントが改良の余地なく実装されている例を見たことがないだけでなく、問題の原因となっていない例も見た経験がありません。

最後に、「巨大単一テーブル症候群」を回避するのも実はとても簡単です。新しい E メール用に別個のテーブルを作成し、処理が完了した時点でメールを長期格納用のストレージに INSERT して、キュー テーブルから DELETE します。通常は新規 E メールのテーブルは小さいサイズのままで、その操作も迅速となります。そして、DELETE の前に INSERT を実行し、INSERT IGNORE または REPLACE を使用すれば、2 つのテーブル間でアプリケーションがクラッシュしてもトランザクションの使用を考える必要はありません。これにより、ロックと他のオーバーヘッドはさらに削減されます。DELETE を実行できない場合は、通常のクリーンナップ タスクを使って孤立した行の再試行と完全削除を実行できます。(何だかこれもジョブ キューみたいな感じがしてきましたね。)どんな種類のキューでもほぼ同じ操作が可能です。たとえば、承認待ちの記事やコメントを別個のテーブルに入れることができます。これは大規模なアプリケーションでは必要ですが、Wordpress を使った個人の ブログにこのような配慮はいりません (ただしバックエンドに Wordpress を使って CNN.com 全体を書き直すという場合は別ですが)。

最後に、一番露骨な解決策として、データベースを一切使わないという方法があります。代わりに Resque、ActiveMQ、RabbitMQ、または Gearman といった真のキュー システムを使用します。ただし、データベースに対する永続化を有効にし、これに MySQL の使用を選択することのないよう注意してください。キュー システムによっては、これによってより一般的な形でさらに悪い問題が再発する可能性があります。一部のキュー システムでは、先に挙げたデータベースのワースト プラクティスがすべて用いられています。

この記事で、MySQL 内で意図に反してジョブ キューが作成されてしまい、それが原因で痛い思いをするさまざまな例についてご理解いただけたものと思います。こうした設計パターンを見分けて回避する、あるいは少なくとも被害に会わないような方法で実装するための参考になれば幸いです。これは本当によく見かける問題で、お客様から寄せられる典型的な質問の 1 つとなっています。では、記事はこれで終わりにして、これから保留中のコンサルティング リクエストのリストを確認し、次の用件は何かをチェックしたいと思います...
