---
layout: post
status: publish
published: true
title: Node.jsを使う状況 (翻訳版)
author: Jake Luer
author_login: jakeluer
author_email: jakeluer@engineyard.com
wordpress_id: 816
wordpress_url: http://www.engineyard.co.jp/blog/?p=816
date: 2013-05-02 10:00:04.000000000 +09:00
categories:
- Uncategorized
tags: []
comments: []
---
<div class="note">こちらの記事は英語版のブログに<a href="https://blog.engineyard.com/2013/when-to-use-nodejs" target="_blank">2013年2月12日に掲載された記事</a>の翻訳版です。</div>

約2年前にNode.jsの専任になるまで、私は自分のことを何でも屋のウェブ開発者だと思っていました。アプリケーションの大半はPHPかPython風に書いて、週末は、JavaとRubyを試してみる、ということをしていたのですから。それに、当時の多くのJavaScript開発者たちと同じように、私もjQueryのプラグインを書いていました。今から思うと、開発者として焦点が定まっておらず、何かがすべてを結び付けてくれるのを待っていたのです。

初めてNode.jsを試してみた時は、アプリケーション全部をひとつの言語で書くことができてとても新鮮でした。それに、開発者コミュニティの初期ツールのおかげで、小さくてテスト可能な別個のモジュールを容易に作ることができました。モジュールは他のさまざまな環境の土台ですが、Node.jsと<a href="https://npmjs.org/" target="_blank">npm</a>（Nodeのコマンドラインへの依存管理ツール）は私がモジュールというシステムで嫌っていた多くのことに対処しているように見えました。

Node.jsのツールもコミュニティも当時から発展しましたが、その中核となる理念は今も変わっていません。最も重要なことは、どんな特殊な問題にも解決方法がたくさんあることです。以前投稿した<a href="https://blog.engineyard.com/2012/nodejs" target="_blank">Getting Started With Node.js（Node.jsをはじめるにあたって）</a>で、Node.jsとは何か、どのようにして開発されたのか、初期のNode.js導入企業の使用理由について説明しました。今回は、この記事によってみなさんがNodes.jsをもっとよく知り、次のプロジェクトに使いたいと思ってくれたら、と願っています。

<h2>拡大する人材プール</h2>

さて、みなさんは開発者である新しいプロジェクトに関わっています。今の手持ちのツールではすべてのニーズを満たせないことに気づいている、またはただ何か新しいことを学びたいと思っているとしましょう。ひょっとしたら、新事業の立ち上げを考えていて、小さいながらも成長している自分のチームに「ロックスター」的な開発者か、技術の共同創立者を引きつける職務内容説明書を作成しているところかもしれません。

新たな試みをいつ計画するか――その時期を検討する基準はいろいろありますが、人材ほど重要なものはありません。JavaScriptは至るところに存在しますから、その領域には多くの人材がいます。しかし、Node.jsは新しいツールです。それを考えると、一見ほとんど理に適っていないように思われますが、実はこれは人材探しには完璧なタイミングなのです。Node.jsにはかなりの数の潜在的な被雇用者がいて、全員が開発最先端のものに興味を持っているのです。こうした候補者たちは自立的思考を持った独学のプログラマーたちで、新企業で、今まで誰も取り組んだことがないような困難な問題を解決しながら働きたいと望んでいます。

<h2>クライアントとサーバの結合</h2>

クライアントサイドのJavaScript開発者にとって、今は初めてのNode.jsサーバを起動させるチャンスです。みなさんはすでに有利な立場にいるのです。知っていることをすべて学び直す必要がないのですから、サーバーサイドでもクライアントサイドでも、どちら側でも働くことができるのです。

npmには、素早い起動と動作を容易に実現するツールがたくさんあります。まず最初は、<a href="http://expressjs.com/">Express</a> ウェブ アプリケーション フレームワークとMongoDBを使ったデータモデリング用の<a href="http://mongoosejs.com/">Mongoose ODM</a>から始めるとよいでしょう。これらのツールを使えば、プロジェクトに構造や組織はほとんど必要とされず、開発者は一番快適なスタイルを自由に模索し、実行することができます。さらに、Node.jpと非同期プログラミングを独学した初心者には、これらのツールはきわめて役に立つリソースになります。

しかし、もっと構造的なものを探しているのであれば、既存のサーバーサイドのウェブ開発フレームワーク パラダイムで最も評判がよいのはModel-View-Controller（MVC）でしょう。ほとんどの言語に、データのモデル化とプレゼンテーションを分離するMVC原理を実行する、評判のよいフレームワークが一つ以上存在します。開発者は、その多用途性、デバッギング、協調しやすさからこの整理方法を用いています。ウェブ アプリケーションがよりリッチなユーザーインターフェースを要求し、JavaScriptが注目されるにつれて、JavaScript開発者の需要も増えました。現在は、<a href="http://backbonejs.org/">Backbone.js</a>など、MVCの導入を実行する多くのクライアントサイドのJavaScriptフレームワークがあります。

JavaScriptについてほとんど知らなくても、MVCパラダイムに詳しい開発者なら、Node.jsに使用できる多くのフレームワークや、Node.jsにビルドされたフレームワークのうち、どれかひとつを検討すべきです。<a href="http://meteor.com/">Meteor.js</a>は厳密にはMVCではありませんが、クライアントとサーバのどちらのサイドもJavaScriptで記述できるツールのひとつです。サーバーサイドの開発は初めてというJavaScript開発者たちも、すぐに慣れることができるでしょう。Railsかそれに似たフレームワークを扱っていた開発者は、コードの整理方法に馴染みがあり、実行される方法にパワーを感じるでしょう。

<h2>マルチコア ハードウェアを最大限に活用する</h2>

一部のアプリケーション、特に企業のアプリケーションは、大きな記憶容量とJava Virtual Machine（JVM）のマルチスレッドが必要です。JVMは、マルチコア プロセッサをもつ現代のハードウェアに多くのメリットを提供します。このため、開発者によっては、Node.jsが本質的にマルチスレッドをサポートしない――つまり、一つのNode.jsが一つのスレッドしか処理しない――ことが分かると、Node.jsを避けてしまいます。

Node.jsには、使用に適した状況があります。そのひとつのシナリオが、大量の同時リクエストへのサポートが必要なウェブまたはRESTfulアプリケーションです。Node.jsには「クラスタ」モジュールがあり、この「クラスタ」モジュールはどんなウェブ サーバ処理も同じポートを共有する複数のプロセスに分けることができます。分けられたサーバ処理のロードバランシングは、オペレーティング システムが行います。もっと詳しく知りたい方は、<a href="http://nodejs.org/api/cluster.html">Node.js Cluster API Documentation</a>をご覧ください。

ますます複雑になるシステムを正当化してくれるもう一つの状況は、長時間続くユーティリティを扱う場合です。データベースの読み書きをしている時や、サードパーティのAPIにリクエストしている時、ファイルシステムのIOを行っている時にNode.jsの非同期モデルのパフォーマンスは向上しますが、すべてのオペレーションが同じスレッドに属しているわけではありません。メディア暗号化などの複雑なオペレーションに、ウェブ サーバと同じ処理はふさわしくありません。Railsアプリケーションはずいぶん前にバックグラウンドキューでこの問題を解決し、Node.jsも同様の処置をとっています。<a href="http://kinetik.qualiancy.com/">Kinetik</a>などのツールは、複雑なアプリケーションにおいてきわめて有益です。一部のRails開発者は、増大するスループットのために、自分たちのバックグラウンド処理をNode.jsに移動させ始めています。

<h2>終わりに</h2>

クライアントサイドのエンジニアは、サーバーサイドのJavaScriptへの移行をスムーズにするために、自由に使えるモジュールをたくさん持っています。MVCパラダイムを使う人なら、Node.jsのツールに親しみを覚えるでしょう。JVMに依存しきっている企業ユーザーたちは、その使用を見直すべきです。もっと軽いものを試す時期に来ているかもしれないのですから。アプリケーション スタックを軽量化し、サーバの数を減らしても、同じパフォーマンスを実現することができるでしょう。クラスタリングとバックグラウンドのキューであなたのワークロードに対処することができるならば、なおさらです。

適切なツールを選ぶことは極めて重要であり、適切な人材を選ぶこともまた然りです。ですから、今度重要なウェブ アプリケーションを計画したり、採用者の面談をしたり、週末を新しいスキルの学習に充てる時は、自分が何を成し遂げたいかを自問してみましょう。その結果、今こそNode.jsを試すときだ、と思ってくれるよう願っています。

リソース
<ul>
<li dir="ltr"><a href="http://nodejs.org/">Node.js</a> (GitHub: <a href="https://github.com/joyent/node">joyent/node</a>)</li>
<li dir="ltr"><a href="https://npmjs.org/">npm Registry</a></li>
<li dir="ltr"><a href="https://blog.engineyard.com/2012/nodejs">Getting Started with Node.js</a></li>
<li dir="ltr"><a href="http://expressjs.com/">Express</a></li>
<li dir="ltr"><a href="http://nodejs.org/api/cluster.html">Node.js Cluster API Documentation</a></li>
<li dir="ltr"><a href="http://kinetik.qualiancy.com/">Kinetik</a></li>
</ul>
